diff --git a/heap_insert/README.md b/heap_insert/README.md
old mode 100644
new mode 100755
diff --git a/linked_list_palindrome/lists.h b/linked_list_palindrome/lists.h
index 67693bf..1db4da9 100755
--- a/linked_list_palindrome/lists.h
+++ b/linked_list_palindrome/lists.h
@@ -1,24 +1,49 @@
-#ifndef LISTS_H
-#define LISTS_H
+#include <stdio.h>
+#include <stdlib.h>
+#include "lists.h"

 /**
- * struct listint_s - singly linked list
- * @n: integer
- * @next: points to the next node
+ * check_recursively - Recursively checks if the list is a palindrome.
+ * @start: Double pointer tracking the front of the list.
+ * @end: Pointer moving to the end of the list to compare values.
  *
- * Description: singly linked list node structure
- * for Holberton project
+ *
+ * Description: Traverses to the list end recursively. Compares values from
+ *              @start and @end on the return path to check palindrome properties.
+ *              Moves @start forward post-recursion to check next pair.
+ *
+ * Return: 1 if the sublist is a palindrome, 0 otherwise.
  */
-typedef struct listint_s
+int check_recursively(listint_t **start, listint_t *end)
 {
-	int n;
-	struct listint_s *next;
-} listint_t;
+    int check;
+
+    if (end == NULL)
+        return 1;  /* Base case: end of list */
+
+    check = check_recursively(start, end->next);
+    if (check == 0)
+        return 0;  /* Early termination if mismatch found */

-size_t print_listint(const listint_t *h);
-listint_t *add_nodeint_end(listint_t **head, const int n);
-void free_listint(listint_t *head);
+    check = ((*start)->n == end->n) ? 1 : 0;
+    *start = (*start)->next;  /* Advance start for next comparison */

-int is_palindrome(listint_t **head);
+    return check;
+}
+
+/**
+ * is_palindrome - Checks if a singly linked list is a palindrome.
+ * @head: Pointer to the start of the list.
+ *
+ * Description: Uses recursion to check for palindrome by comparing
+ *              nodes from start to end.
+ *
+ * Return: 1 if palindrome, 0 otherwise.
+ */
+int is_palindrome(listint_t **head)
+{
+    if (*head == NULL)
+        return 1;  /* Consider empty list a palindrome */

-#endif /* LISTS_H */
\ No newline at end of file
+    return check_recursively(head, *head);
+}
\ No newline at end of file
diff --git a/log_parsing/0-generator.py b/log_parsing/0-generator.py
old mode 100644
new mode 100755
diff --git a/sandpiles/0-sandpiles.c b/sandpiles/0-sandpiles.c
old mode 100644
new mode 100755
diff --git a/sandpiles/sandpiles.h b/sandpiles/sandpiles.h
old mode 100644
new mode 100755
diff --git a/slide_line/0-slide_line b/slide_line/0-slide_line
index 47f0a0c..a9651da 100755
Binary files a/slide_line/0-slide_line and b/slide_line/0-slide_line differ
